dnl -*- shell-script -*-
dnl
dnl mad - MPEG audio decoder
dnl Copyright (C) 2000 Robert Leslie
dnl
dnl This program is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2 of the License, or
dnl (at your option) any later version.
dnl
dnl This program is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.
dnl
dnl You should have received a copy of the GNU General Public License
dnl along with this program; if not, write to the Free Software
dnl Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
dnl
AC_REVISION([$Id: configure.in,v 1.5 2000/09/14 17:33:47 rob Exp $])dnl

dnl Process this file with autoconf to produce a configure script.

AC_INIT(decoder.h)
AC_CONFIG_HEADER(config.h)

dnl System type.

AC_CANONICAL_HOST

dnl Checks for programs.

AC_PROG_MAKE_SET
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_RANLIB

dnl Compiler options.

AC_PROG_GCC_TRADITIONAL

ARCH=""
DEBUGGER=""
OPTIMIZER=""
PROFILER=""

AC_SUBST(ARCH)
AC_SUBST(DEBUGGER)
AC_SUBST(OPTIMIZER)
AC_SUBST(PROFILER)

if test "$GCC" = yes
then
    case "$host" in
	i386-*)      ARCH="" ;;
	i?86-*)      ARCH="-m486" ;;
	arm-empeg-*) ARCH="-march=armv4 -mtune=strongarm1100" ;;
	arm-*)       ARCH="-march=armv4" ;;
	mips-*)      ARCH="-mips3" ;;
		     #-mcpu=vr4100
    esac
fi

case "$CFLAGS" in
    *-g*) DEBUGGER="-g" ;;
esac

case "$CFLAGS" in
    *-O*) OPTIMIZER="-O" ;;
esac

CFLAGS=""

if test -n "$OPTIMIZER" && test "$GCC" = yes
then
    OPTIMIZER="$OPTIMIZER"
    # -funroll-loops -finline-functions
fi

dnl Checks for header files.

AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(limits.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.

AC_C_CONST
AC_C_INLINE
AC_TYPE_PID_T

AC_CHECK_SIZEOF(int, 2)
AC_CHECK_SIZEOF(long, 4)
AC_CHECK_SIZEOF(long long, 8)

dnl Other options.

FPM=""
ASO=""
OPT=""

MISCOBJS=""

AC_SUBST(FPM)
AC_SUBST(ASO)
AC_SUBST(OPT)

AC_SUBST(MISCOBJS)

AC_ARG_ENABLE(fpm,
    [  --enable-fpm=<arch>     use <arch>-specific fixed-point math routines
                          (one of: intel, arm, mips, sparc, 64bit, approx)], [
    case "$enableval" in
	no) ;;

	yes)
	    case "$host" in
		i?86-*)   FPM="INTEL" ;;
		arm-*)    FPM="ARM"   ;;
		mips-*)   FPM="MIPS"  ;;
		sparc*-*) FPM="SPARC" ;;
	    esac
	    ;;

	intel|i?86) FPM="INTEL"  ;;
	arm)        FPM="ARM"    ;;
	mips)       FPM="MIPS"   ;;
	sparc)      FPM="SPARC"  ;;
	64bit)      FPM="64BIT"  ;;
	approx)     FPM="APPROX" ;;

	*) AC_MSG_ERROR([bad --enable-fpm option])
	   ;;
    esac
], [
    if test "$GCC" = yes
    then
	case "$host" in
	    i?86-*)   FPM="INTEL" ;;
	    arm-*)    FPM="ARM"   ;;
	    mips-*)   FPM="MIPS"  ;;
	    sparc*-*) FPM="SPARC" ;;
	    # FIXME: need to test 64-bit long long...
	    *)
	    AC_MSG_WARN([using fixed-point math approximations (see README)])
		FPM="APPROX"
		;;
	esac
    else
	AC_MSG_WARN([using fixed-point math approximations (see README)])
	FPM="APPROX"
    fi
])

if test -n "$FPM"
then
    FPM="-DFPM_$FPM"
fi

dnl handle --enable and --disable options

AC_ARG_ENABLE(is-kluge,
    [  --disable-is-kluge      do not use Layer III intensity stereo kluge], [
    case "$enableval" in
        yes) AC_DEFINE(OPT_ISKLUGE) ;;
    esac
], [
    AC_MSG_WARN([using Layer III intensity stereo kluge (see README)])
    AC_DEFINE(OPT_ISKLUGE)
])

AC_ARG_ENABLE(sso,
    [  --enable-sso            use subband synthesis optimization], [
    case "$enableval" in
	yes) AC_DEFINE(OPT_SSO) ;;
    esac
])

AC_ARG_ENABLE(aso,
    [  --enable-aso            use architecture-specific optimizations], [
    case "$enableval" in
	yes)
	    case "$host" in
		arm-*)
		    ASO="-DASO_IMDCT"
		    MISCOBJS="imdct_l_arm.o"
		;;
	    esac
	    ;;
    esac
])

AC_ARG_ENABLE(profiling,
    [  --enable-profiling      generate profiling code], [
    case "$enableval" in
	yes) PROFILER="-pg" ;;
    esac
])

AC_ARG_ENABLE(debugging,
    [  --enable-debugging      enable diagnostic debugging support
  --disable-debugging     do not enable debugging and use more optimization], [
    case "$enableval" in
	yes)
	    AC_DEFINE(DEBUG)
	    ;;
	no)
	    if test -n "$PROFILER"
	    then
    AC_MSG_ERROR(--enable-profiling and --disable-debugging are incompatible)
	    fi

	    DEBUGGER=""
	    if test "$GCC" = yes
	    then
		OPTIMIZER="$OPTIMIZER -fomit-frame-pointer"
	    fi
	    ;;
    esac
])

AC_ARG_ENABLE(experimental,
    [  --enable-experimental   enable experimental code], [
    case "$enableval" in
	yes) AC_DEFINE(EXPERIMENTAL) ;;
    esac
])

dnl Create output files.

AC_OUTPUT(Makefile)
