dnl -*- m4 -*-
dnl
dnl mad - MPEG audio decoder
dnl Copyright (C) 2000 Robert Leslie
dnl
dnl This program is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2 of the License, or
dnl (at your option) any later version.
dnl
dnl This program is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.
dnl
dnl You should have received a copy of the GNU General Public License
dnl along with this program; if not, write to the Free Software
dnl Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
dnl
AC_REVISION([$Id: configure.in,v 1.10 2000/11/16 10:51:10 rob Exp $])dnl

dnl Process this file with autoconf to produce a configure script.

AC_INIT(decoder.h)
AM_INIT_AUTOMAKE(libmad, 0.12.1b)

AM_CONFIG_HEADER(config.h)

dnl System type.

AC_CANONICAL_HOST

dnl Checks for programs.

AC_PROG_MAKE_SET
AC_PROG_CC
AC_PROG_INSTALL

AC_DISABLE_SHARED
dnl AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL

dnl Compiler options.

AC_PROG_GCC_TRADITIONAL

ARCH=""
DEBUGGER=""
OPTIMIZER=""
PROFILER=""

AC_SUBST(ARCH)
AC_SUBST(DEBUGGER)
AC_SUBST(OPTIMIZER)
AC_SUBST(PROFILER)

if test "$GCC" = yes
then
    case "$host" in
	i386-*)      ARCH="" ;;
	i?86-*)      ARCH="-m486" ;;
	arm-empeg-*) ARCH="-march=armv4 -mtune=strongarm1100" ;;
	armv4*-*)    ARCH="-march=armv4 -mtune=strongarm" ;;
	mips*-*)     ARCH="" ;;
		     # -mips3 -mcpu=vr4100
    esac
fi

case "$CFLAGS" in
    *-g*) DEBUGGER="-g" ;;
esac

case "$CFLAGS" in
    *-O*) OPTIMIZER="-O" ;;
esac

CFLAGS=`echo ".$CFLAGS" |  \
    sed -e 's/^\.//' -e 's/-g//' -e 's/-O.//' -e 's/-O//'`

if test -n "$OPTIMIZER" && test "$GCC" = yes
then
    OPTIMIZER="$OPTIMIZER"
    # -funroll-loops -finline-functions
fi

dnl Checks for header files.

AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(limits.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.

AC_C_CONST
AC_C_INLINE
AC_TYPE_PID_T

AC_CHECK_SIZEOF(int, 2)
AC_CHECK_SIZEOF(long, 4)
AC_CHECK_SIZEOF(long long, 8)

dnl Other options.

AC_SUBST(FPM)
AC_SUBST(ASO)
AC_SUBST(IMDCT_L)

dnl handle --enable and --disable options

AC_MSG_CHECKING(whether to optimize for speed or for accuracy)

AC_ARG_ENABLE(speed,
    [  --enable-speed          optimize for speed over accuracy], [
    case "$enableval" in
	yes)
	    optimize="speed"
	    AC_DEFINE(OPT_SPEED)
	    ;;
    esac
])

AC_ARG_ENABLE(accuracy,
    [  --enable-accuracy       optimize for accuracy over speed], [
    case "$enableval" in
	yes)
	    if test "$optimize" = "speed"
	    then
		optimize="both"
	    else
		optimize="accuracy"
	    fi
	    AC_DEFINE(OPT_ACCURACY)
	    ;;
    esac
])

AC_MSG_RESULT(${optimize-default})

if test "$optimize" = "both"
then
    AC_MSG_ERROR(cannot optimize for both speed and accuracy)
fi

AC_MSG_CHECKING(for architecture-specific fixed-point math routines)
AC_ARG_ENABLE(fpm,
    [  --enable-fpm=<arch>     use <arch>-specific fixed-point math routines
                          (one of: intel, arm, mips, sparc, 64bit, approx)], [
    case "$enableval" in
	no) ;;

	yes)
	    case "$host" in
		i?86-*)   FPM="INTEL" ;;
		arm*-*)   FPM="ARM"   ;;
		mips*-*)  FPM="MIPS"  ;;
		sparc*-*) FPM="SPARC" ;;
	    esac
	    ;;

	intel|i?86) FPM="INTEL"  ;;
	arm)        FPM="ARM"    ;;
	mips)       FPM="MIPS"   ;;
	sparc)      FPM="SPARC"  ;;
	64bit)      FPM="64BIT"  ;;
	approx)     FPM="APPROX" ;;

	*) AC_MSG_ERROR([bad --enable-fpm option])
	   ;;
    esac
], [
    if test "$GCC" = yes
    then
	case "$host" in
	    i?86-*)   FPM="INTEL"  ;;
	    arm*-*)   FPM="ARM"    ;;
	    mips*-*)  FPM="MIPS"   ;;
	    sparc*-*) FPM="SPARC"  ;;
	    # FIXME: need to test 64-bit long long...
	    *)        FPM="APPROX" ;;
	esac
    else
	FPM="APPROX"
    fi
])
AC_MSG_RESULT(${FPM-disabled})

if test "$FPM" = "APPROX"
then
    AC_MSG_WARN([fixed-point math approximations will yield limited accuracy])
elif test -z "$FPM"
then
    AC_MSG_WARN([slow performance will result without --enable-fpm])
fi

if test -n "$FPM"
then
    FPM="-DFPM_$FPM"
fi

AC_ARG_ENABLE(sso,
    [  --enable-sso            use subband synthesis optimization], [
    case "$enableval" in
	yes) AC_DEFINE(OPT_SSO) ;;
    esac
])

AC_ARG_ENABLE(aso,
    [  --enable-aso            use architecture-specific optimizations], [
    case "$enableval" in
	yes)
	    case "$host" in
		arm*-*)
		    ASO="-DASO_IMDCT"
		    IMDCT_L="imdct_l_arm.lo"
		    ;;
	    esac
	    ;;
    esac
], [
    case "$host" in
	arm*-*)
	    ASO="-DASO_IMDCT"
	    IMDCT_L="imdct_l_arm.lo"
	    ;;
    esac
])

AC_MSG_CHECKING(whether to enable profiling)
AC_ARG_ENABLE(profiling,
    [  --enable-profiling      generate profiling code], [
    case "$enableval" in
	yes) PROFILER="-pg" ;;
    esac
])
AC_MSG_RESULT(${enable_profiling-no})

AC_MSG_CHECKING(whether to enable debugging)
AC_ARG_ENABLE(debugging,
    [  --enable-debugging      enable diagnostic debugging support
  --disable-debugging     do not enable debugging and use more optimization], [
    case "$enableval" in
	yes)
	    AC_DEFINE(DEBUG)
	    OPTIMIZER=""
	    ;;
	no)
	    if test -n "$PROFILER"
	    then
    AC_MSG_ERROR(--enable-profiling and --disable-debugging are incompatible)
	    fi

	    AC_DEFINE(NDEBUG)
	    DEBUGGER=""
	    if test "$GCC" = yes
	    then
		OPTIMIZER="$OPTIMIZER -fomit-frame-pointer"
	    fi
	    ;;
    esac
])
AC_MSG_RESULT(${enable_debugging-default})

AC_MSG_CHECKING(whether to enable experimental code)
AC_ARG_ENABLE(experimental,
    [  --enable-experimental   enable experimental code], [
    case "$enableval" in
	yes) AC_DEFINE(EXPERIMENTAL) ;;
    esac
])
AC_MSG_RESULT(${enable_experimental-no})

dnl Create output files.

LTLIBOBJS=`echo "$LIBOBJS" | sed -e 's/\.o/.lo/g'`
AC_SUBST(LTLIBOBJS)

AC_OUTPUT(Makefile)
